cmake_minimum_required(VERSION 3.20)

set(CMAKE_CONFIGURATION_TYPES "Debug;MinSizeRel" CACHE STRING "" FORCE)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

set(CMAKE_THREAD_LIBS_INIT "-lpthread")
set(CMAKE_HAVE_THREADS_LIBRARY 1)
set(CMAKE_USE_WIN32_THREADS_INIT 0)
set(CMAKE_USE_PTHREADS_INIT 1)
set(THREADS_PREFER_PTHREAD_FLAG ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread")

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

project(lilDevil CXX)

add_definitions("-std=c++11")

set(COMPANY "Twelve Chairs Software, LLC")
set(COPYRIGHT "Copyright (c) 2021 Twelve Chairs Software, LLC. All rights reserved.")
set(IDENTIFIER "com.twelvechairs-software.lildevil")
set(LICENSE "MIT")
set(BUNDLE_VERSION "1.0")
set(PROJECT_VERSION "1.0")
set(PROJECT_VERSION_MAJOR "1")
set(PROJECT_VERSION_MINOR "0")
set(ApplicationCategoryType "public.app-category.developer-tools")

list(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})
list(APPEND CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR})

if(NOT EXISTS "${CMAKE_BINARY_DIR}/conan.cmake")
    message(STATUS "Downloading conan.cmake from https://github.com/conan-io/cmake-conan")
    file(DOWNLOAD "https://raw.githubusercontent.com/conan-io/cmake-conan/v0.16.1/conan.cmake"
            "${CMAKE_BINARY_DIR}/conan.cmake"
            EXPECTED_HASH SHA256=396e16d0f5eabdc6a14afddbcfff62a54a7ee75c6da23f32f7a31bc85db23484
            TLS_VERIFY ON)
endif()

include(${CMAKE_BINARY_DIR}/conan.cmake)
conan_cmake_configure(REQUIRES fmt/8.0.1
        spdlog/1.9.2
        qt/5.15.2
        GENERATORS cmake
        cmake_find_package
        cmake_paths
        cmake_find_package_multi)
conan_cmake_autodetect(settings)
conan_cmake_install(PATH_OR_REFERENCE .
        BUILD missing
        REMOTE conancenter
        UPDATE
        SETTINGS ${settings})

#if (APPLE)
#    set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/dist/homebrew)
#    set(CMAKE_PREFIX_PATH "/usr/local/opt/qt")
#
#elseif (WIN32)
#    set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/dist/choco)
#    set(WIN32QT "C:/Qt/5.13.1/msvc2017")
#    set(CMAKE_PREFIX_PATH ${WIN32QT})
#    set(DLLLIST "Widgets;Concurrent;Gui;Network")
#    foreach(DLL ${DLLLIST})
#        file(COPY ${WIN32QT}/bin/Qt5${DLL}d.dll
#                DESTINATION ${CMAKE_BINARY_DIR})
#        file(COPY ${WIN32QT}/bin/Qt5${DLL}.dll
#                DESTINATION ${CMAKE_BINARY_DIR})
#    endforeach()
#
#else()
#    set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/dist/snap)
#    set(CMAKE_PREFIX_PATH "/usr/local/opt/qt")
#
#endif()



#include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
#conan_basic_setup()
#conan_set_find_library_paths()
#
#include_directories(${CONAN_INCLUDE_DIRS})

find_package(fmt REQUIRED)
find_package(spdlog REQUIRED)
find_package(Qt5 COMPONENTS Gui Concurrent Widgets Network REQUIRED)

include(QtCommon)
add_project_meta(META_FILES_TO_INCLUDE)

set(RESOURCE_FILES ${PROJECT_NAME}.qrc)

add_executable(${PROJECT_NAME}
        ${OS_BUNDLE}
        src/main.cpp
        src/main.h
        src/mainwindow.cpp
        src/mainwindow.h
        src/configdialog.cpp
        src/configdialog.h
        src/jiratab.cpp
        src/jiratab.h
        src/confluencetab.cpp
        src/confluencetab.h
        src/jiraissue.cpp
        src/jiraissue.h
        src/githubtab.cpp
        src/githubtab.h
        src/jenkinstab.cpp
        src/jenkinstab.h
        ${META_FILES_TO_INCLUDE}
        ${RESOURCE_FILES}
        )

target_link_libraries(${PROJECT_NAME} fmt::fmt)
#CONAN_PKG::Qt5::Gui
#Qt5::Widgets Qt5::Gui Qt5::Concurrent Qt5::Network